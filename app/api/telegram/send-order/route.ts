import { type NextRequest, NextResponse } from "next/server"

// ‚ö†Ô∏è In production store secrets in env vars
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "REPLACE_ME_BOT_TOKEN"
const ADMIN_ID = process.env.TELEGRAM_ADMIN_ID || "REPLACE_ME_ADMIN_ID"      // numeric string
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME || "REPLACE_ME_BOT_USERNAME" // without @

const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

async function notifyAdmin(orderId: string, orderData: any) {
  const itemsStr = (orderData.items || [])
    .map((it: any, idx: number) => `${idx+1}. ${it.name || it.title || "–¢–æ–≤–∞—Ä"} ‚Äî ${it.size || ""} √ó ${it.quantity || 1} = ${it.price || 0}`)
    .join("\n")

  const customer = orderData.customer || {}
  const total = orderData.total ?? 0
  const shipping = orderData.shippingCost ?? 0

  const deepLink = `https://t.me/${BOT_USERNAME}?start=order_${orderId}`

  const text = [
    "üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>",
    `‚Ññ: <code>${orderId}</code>`,
    "",
    "<b>–¢–æ–≤–∞—Ä—ã:</b>",
    itemsStr || "‚Äî",
    "",
    "<b>–ö–ª–∏–µ–Ω—Ç:</b>",
    `–ò–º—è: ${customer.firstName ?? ""} ${customer.lastName ?? ""}`.trim(),
    customer.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${customer.phone}` : "",
    customer.email ? `Email: ${customer.email}` : "",
    customer.city ? `–ì–æ—Ä–æ–¥: ${customer.city}` : "",
    customer.address ? `–ê–¥—Ä–µ—Å: ${customer.address}` : "",
    customer.apartment ? `–ö–≤/–û—Ñ–∏—Å: ${customer.apartment}` : "",
    customer.postalCode ? `–ò–Ω–¥–µ–∫—Å: ${customer.postalCode}` : "",
    customer.comments ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customer.comments}` : "",
    "",
    `<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${shipping}`,
    `<b>–ò—Ç–æ–≥–æ:</b> ${total}`,
    "",
    `üîó <a href="${deepLink}">–û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º</a>`,
  ].filter(Boolean).join("\n")

  await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: ADMIN_ID, text, parse_mode: "HTML", disable_web_page_preview: true }),
    // @ts-ignore
    cache: "no-store",
  })
}

export async function POST(request: NextRequest) {
  try {
    const orderData = await request.json()
    const orderId = Date.now().toString()

    // TODO: persist to DB in production

    // Notify admin in Telegram with deep-link to chat
    await notifyAdmin(orderId, orderData)

    // Reply to frontend with order id and deep-link to bot
    const botLink = `https://t.me/${BOT_USERNAME}?start=order_${orderId}`
    return NextResponse.json({ success: true, orderId, botLink })
  } catch (error) {
    console.error("Error processing order:", error)
    return NextResponse.json({ success: false, error: "Failed to process order" }, { status: 500 })
  }
}
