import { NextResponse } from "next/server"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ""
const ADMIN_IDS = (process.env.TELEGRAM_ADMIN_IDS || "")
  .split(",")
  .map((id) => Number(id.trim()))
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME || "OtrodyaBot"

const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

async function sendMessage(chatId: number, text: string, extra: any = {}) {
  await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      ...extra,
    }),
  })
}

export async function POST(req: Request) {
  let body: any
  try {
    body = await req.json()
    console.log("üëâ RAW ORDER BODY:", JSON.stringify(body, null, 2)) // üëà –õ–û–ì –í VERCEL

    // –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∑–∞–∫–∞–∑
    const order = body.order ? body.order : body
    if (!order) {
      throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ body")
    }

    const orderId = order.orderId || order.id || "‚Äî"

    const itemsText = (order.items || [])
      .map(
        (i: any) =>
          `${i.name || "??"} ‚Äî ${i.size || ""} √ó ${i.quantity || 1} = ${
            i.price || 0
          }`
      )
      .join("\n")

    const text = [
      "üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>",
      `‚Ññ: <code>${orderId}</code>`,
      "",
      "–¢–æ–≤–∞—Ä—ã:",
      itemsText || "‚Äî",
      "",
      "–ö–ª–∏–µ–Ω—Ç:",
      `–ò–º—è: ${order.customerName || "??"}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || "??"}`,
      `Email: ${order.email || "??"}`,
      `–ì–æ—Ä–æ–¥: ${order.city || "??"}`,
      `–ê–¥—Ä–µ—Å: ${order.address || "??"}`,
      `–ò–Ω–¥–µ–∫—Å: ${order.postalCode || "??"}`,
      "",
      `–î–æ—Å—Ç–∞–≤–∫–∞: ${order.deliveryPrice ?? "??"}`,
      `–ò—Ç–æ–≥–æ: ${order.totalPrice ?? "??"}`,
      "",
      `üîó <a href="https://t.me/${BOT_USERNAME}?start=order_${orderId}">–û—Ç–∫—Ä—ã—Ç—å/—Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º</a>`,
    ].join("\n")

    for (const adminId of ADMIN_IDS) {
      await sendMessage(adminId, text, { disable_web_page_preview: true })
    }

    return NextResponse.json({ ok: true })
  } catch (e) {
    console.error("send-order error", e)

    // üîß –æ—Ç–ø—Ä–∞–≤–∏–º —Å—ã—Ä–æ–π JSON –ø—Ä—è–º–æ –∞–¥–º–∏–Ω—É, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç
    const rawJson = JSON.stringify(body || {}, null, 2)
    for (const adminId of ADMIN_IDS) {
      await sendMessage(
        adminId,
        `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞\n\n<pre>${rawJson}</pre>`,
        { disable_web_page_preview: true }
      )
    }

    return NextResponse.json(
      {
        ok: false,
        error: String(e),
        requestBody: body || "–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å",
      },
      { status: 500 }
    )
  }
}
