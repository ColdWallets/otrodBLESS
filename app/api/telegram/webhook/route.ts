import { type NextRequest, NextResponse } from "next/server"

// ‚ö†Ô∏è –ü–µ—Ä–µ–Ω–µ—Å–∏ —Ç–æ–∫–µ–Ω—ã –∏ ID –≤ .env
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "YOUR_TOKEN_HERE"
const ADMIN_IDS = (process.env.TELEGRAM_ADMIN_IDS || "6772742245,1234567890")
  .split(",")
  .map((id) => id.trim())
const BOT_USERNAME = process.env.TELEGRAM_BOT_USERNAME || "OtrodyaBot"

const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

// –°–æ—Å—Ç–æ—è–Ω–∏—è
type UserSession = {
  chatId: number
  orderId?: string
  status: "new" | "waiting_for_operator" | "connected_to_operator"
}

const userSessions = new Map<number, UserSession>()
const activeChats = new Map<number, string>() // userId -> adminId

// Helpers
async function sendMessage(chatId: number | string, text: string, replyMarkup?: any) {
  const res = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      reply_markup: replyMarkup,
    }),
    // @ts-ignore
    cache: "no-store",
  })
  return res.json()
}

async function answerCallbackQuery(id: string, text?: string) {
  await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ callback_query_id: id, text }),
  })
}

function makeAdminConnectKeyboard(userId: number) {
  return {
    inline_keyboard: [
      [{ text: "‚úâÔ∏è –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data: `admin_connect:${userId}` }],
      [{ text: "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data: "admin_list" }],
    ],
  }
}

export async function POST(req: NextRequest) {
  try {
    const update = await req.json()

    // --- Callback –∫–Ω–æ–ø–∫–∏ (–¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞)
    if (update.callback_query) {
      const cb = update.callback_query
      const fromId: string = String(cb.from.id)
      const data: string = cb.data

      if (ADMIN_IDS.includes(fromId)) {
        if (data.startsWith("admin_connect:")) {
          const userId = Number(data.split(":")[1])
          if (userSessions.has(userId)) {
            activeChats.set(userId, fromId)
            await answerCallbackQuery(cb.id, "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–ª–∏–µ–Ω—Ç—É")
            await sendMessage(fromId, `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>${userId}</code>. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–µ—Ä–µ—à–ª—é.`)
            await sendMessage(userId, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É ‚úÖ")
            userSessions.set(userId, { ...userSessions.get(userId)!, status: "connected_to_operator" })
          } else {
            await answerCallbackQuery(cb.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
          }
        } else if (data === "admin_list") {
          await answerCallbackQuery(cb.id, "–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫")
          if (userSessions.size === 0) {
            await sendMessage(fromId, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
          } else {
            let list = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n\n"
            for (const [uid, s] of userSessions) {
              list += `‚Ä¢ <code>${uid}</code> ‚Äî —Å—Ç–∞—Ç—É—Å: <b>${s.status}</b>${s.orderId ? `, –∑–∞–∫–∞–∑: <code>${s.orderId}</code>` : ""}\n`
            }
            await sendMessage(fromId, list, {
              inline_keyboard: [
                ...[...userSessions.keys()].map((uid) => [{ text: `–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ${uid}`, callback_data: `admin_connect:${uid}` }]),
              ],
            })
          }
        }
      }
      return NextResponse.json({ ok: true })
    }

    // --- –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      const msg = update.message
      const chatId: number = msg.chat.id
      const fromId: number = msg.from.id
      const text: string = msg.text || ""

      // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º
      if (text.startsWith("/start")) {
        const payload = text.split(" ").slice(1).join(" ")
        if (payload && payload.startsWith("order_")) {
          const orderId = payload.replace("order_", "")
          const already = userSessions.has(fromId)

          userSessions.set(fromId, { chatId, orderId, status: "waiting_for_operator" })

          // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          if (!already) {
            await sendMessage(chatId, [
              "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>",
              "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
              "",
              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å."
            ].join("\n"))
          }

          // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
          for (const adminId of ADMIN_IDS) {
            await sendMessage(adminId, [
              "üÜï <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –±–æ—Ç–µ</b>",
              `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${fromId}</code>`,
              `–ó–∞–∫–∞–∑: <code>${orderId}</code>`,
            ].join("\n"), makeAdminConnectKeyboard(fromId))
          }
        }
        return NextResponse.json({ ok: true })
      }

      // --- –ï—Å–ª–∏ –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω
      if (ADMIN_IDS.includes(String(fromId))) {
        for (const [uid, adminId] of activeChats.entries()) {
          if (adminId === String(fromId)) {
            await sendMessage(uid, text)
          }
        }
        return NextResponse.json({ ok: true })
      }

      // --- –ï—Å–ª–∏ –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç
      if (activeChats.has(fromId)) {
        const adminId = activeChats.get(fromId)!
        await sendMessage(adminId, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <code>${fromId}</code>:\n${text}`)
      } else {
        // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for (const adminId of ADMIN_IDS) {
          await sendMessage(adminId, `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <code>${fromId}</code>:\n${text}`, makeAdminConnectKeyboard(fromId))
        }
      }
    }

    return NextResponse.json({ ok: true })
  } catch (err) {
    console.error("Webhook error:", err)
    return NextResponse.json({ ok: false })
  }
}
