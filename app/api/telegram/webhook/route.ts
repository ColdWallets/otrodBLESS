import { type NextRequest, NextResponse } from "next/server"

const TELEGRAM_BOT_TOKEN = "8369763130:AAFDJGzAw36tiPdLfBkD610knG_pGUwQ47o"
const ADMIN_ID = "6772742245"
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`

// Store user sessions (in production, use a database)
const userSessions = new Map()

async function sendMessage(chatId: string, text: string, replyMarkup?: any) {
  const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: replyMarkup,
      parse_mode: "HTML",
    }),
  })

  return response.json()
}

export async function POST(request: NextRequest) {
  try {
    const update = await request.json()

    if (update.message) {
      const message = update.message
      const chatId = message.chat.id.toString()
      const text = message.text
      const userId = message.from.id.toString()

      if (text === "/start") {
        // Handle /start command
        const welcomeText = `üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OTRODYA!</b>

–í–∞—à –∑–∞–∫–∞–∑:
üì¶ <b>–û–¢–†–û–î–¨–ï –î–ï–ù–¨–ì–ò</b> - 16,000 ‚Ç∏
üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> –ë—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
üöö <b>–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã",
                callback_data: "contact_operator",
              },
            ],
          ],
        }

        await sendMessage(chatId, welcomeText, keyboard)
      }
    }

    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const chatId = callbackQuery.message.chat.id.toString()
      const userId = callbackQuery.from.id.toString()
      const data = callbackQuery.data

      if (data === "contact_operator") {
        // Connect user with operator
        userSessions.set(userId, { chatId, status: "waiting_for_operator" })

        const operatorText = `üîî <b>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${callbackQuery.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
üÜî ID: ${userId}
üì± Username: @${callbackQuery.from.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"}

–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.`

        const operatorKeyboard = {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                callback_data: `accept_order_${userId}`,
              },
            ],
          ],
        }

        // Send notification to admin
        await sendMessage(ADMIN_ID, operatorText, operatorKeyboard)

        // Confirm to user
        await sendMessage(
          chatId,
          `‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–ª–∞—Ç—ã.

‚è∞ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.`,
        )
      }

      if (data.startsWith("accept_order_")) {
        const targetUserId = data.replace("accept_order_", "")
        const userSession = userSessions.get(targetUserId)

        if (userSession) {
          userSession.status = "connected_to_operator"
          userSessions.set(targetUserId, userSession)

          // Notify admin
          await sendMessage(
            chatId,
            `‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç—É.`,
          )

          // Notify user
          await sendMessage(
            userSession.chatId,
            `üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!</b>

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–ª–∞—Ç–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
          )
        }
      }
    }

    // Handle messages from admin to users
    if (update.message && update.message.from.id.toString() === ADMIN_ID) {
      const text = update.message.text

      // Forward admin messages to all connected users
      for (const [userId, session] of userSessions.entries()) {
        if (session.status === "connected_to_operator") {
          await sendMessage(session.chatId, `üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b>\n\n${text}`)
        }
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Telegram webhook error:", error)
    return NextResponse.json({ ok: false }, { status: 500 })
  }
}
